#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#*                                                                           *
#*                  This file is part of the program and library             *
#*         SCIP --- Solving Constraint Integer Programs                      *
#*                                                                           *
#*    Copyright (C) 2002-2018 Konrad-Zuse-Zentrum                            *
#*                            fuer Informationstechnik Berlin                *
#*                                                                           *
#*  SCIP is distributed under the terms of the ZIB Academic License.         *
#*                                                                           *
#*  You should have received a copy of the ZIB Academic License              *
#*  along with SCIP; see the file COPYING. If not email to scip@zib.de.      *
#*                                                                           *
#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

#@file    Makefile
#@brief   Makefile to include in SCIP projects
#@author  Thorsten Koch
#@author  Tobias Achterberg
#@author  Marc Pfetsch
#@author  Timo Berthold
#
# This file contains the core methods to compile SCIP. When using this
# makefile for external projects, you need to define the makefile
# variables SCIPDIR prior to inclusion.
#
# The necessary SCIP libraries can be linked by adding
# $(LINKCXXSCIPALL) or $(LINKCCSCIPALL) to your local linking command,
# e.g. $(LINKCXX) ... $(LINKCXXSCIPALL) $(LDFLAGS) if you use the C++ interface.



#-----------------------------------------------------------------------------
# detect host architecture
#-----------------------------------------------------------------------------
include $(SCIPDIR)/make/make.detecthost


#-----------------------------------------------------------------------------
# get real path to SCIP
#-----------------------------------------------------------------------------
ifeq ($(OSTYPE),mingw)
SCIPREALPATH	=	$(SCIPDIR)
else
SCIPREALPATH	=	$(realpath $(SCIPDIR))
endif


#-----------------------------------------------------------------------------
# default settings
#-----------------------------------------------------------------------------

# check and testing parameters
TIME     	=  	3600
NODES           =       2100000000
MEM		=	6144
THREADS         =       1
PERMUTE         =       0
SEEDS           =       0
GLBSEEDSHIFT    =       0
DISPFREQ	=	10000
FEASTOL		=	default
TEST		=	short
SETTINGS        =       default
CONTINUE	=	false
LOCK		=	false
DEBUGTOOL	=	none
CLIENTTMPDIR    =       /tmp
REOPT		=	false
OPTCOMMAND	=	optimize
SETCUTOFF	=	0
VISUALIZE       =       false
MAXJOBS         =       1
EXECUTABLE      =       $(MAINFILE)
BINID           =       $(notdir $(EXECUTABLE))
OUTPUTDIR       =       results
CLUSTERNODES    =       all

# set SCIP version here for external projects
# use underscore to make it compatible with def.h
SCIP_VERSION	=	5.0.1

# compiling and linking parameters
VERBOSE		=	false
OPT		=	opt
COMP		=	gnu
LPS		=	spx2
TPI		=	none
SYM		=	none
STATICLIBEXT	=	a
SHAREDLIBEXT	=	so
LIBEXT		=	$(STATICLIBEXT)
LINKER  	=	C
SHARED		=	false
NOBLKMEM	=	false
NOBUFMEM	=	false
NOBLKBUFMEM	=	false

# if SHARED = true, nevertheless link to static version of external libraries (usefull for mingw)
LIBEXTFORCESTATIC =	false

#-----------------------------------------------------------------------------
# load different default for debugtool
#-----------------------------------------------------------------------------
-include $(SCIPDIR)/make/local/make.debugtool

ifeq ($(DEBUGTOOL),auto)
   ifeq ($(OPT),dbg)
      override DEBUGTOOL   =   gdb
   else
      override DEBUGTOOL   =   none
   endif
endif

#will this be compiled for parascip, necessary for dbg-builds and cppad to make it threadsafe
PARASCIP	=	false

# enable debug-solution mechanism
DEBUGSOL =  false

# third party compiling parameters
OPENSOURCE   	=	true
READLINE	=	true
ZLIB		=	true
GMP		=	true
ZIMPL		=	false
IPOPT		=	false
FILTERSQP	=	false
WORHP		=	false
EXPRINT 	=	cppad
LPSOPT		=	opt
ZIMPLOPT	=	opt
IPOPTOPT	=	opt
WORHPOPT	=	opt
LPSCHECK        =	false
GAMS		=	false
SPX_LEGACY  	=	false

# compiler and linker parameters
CC		=	gcc
CC_c		=	-c # the trailing space is important
CC_o		=	-o # the trailing space is important
CXX		=	g++
CXX_c		=	-c # the trailing space is important
CXX_o		=	-o # the trailing space is important
LINKCC		=	gcc
LINKCC_L	=	-L
LINKCC_l	=	-l
LINKCC_f	=	-f
LINKCC_o	=	-o # the trailing space is important
LINKCXX		=	g++
LINKCXX_L	=	-L
LINKCXX_l	=	-l
LINKCXX_o	=	-o # the trailing space is important
LINKLIBSUFFIX	=
LINKRPATH	=	-Wl,-rpath,
DCC		=	gcc
DCXX		=	g++
AR		=	ar
AR_o		=
RANLIB		=	ranlib
LIBBUILD	=	$(AR)
LIBBUILD_o	=	$(AR_o)
LIBBUILDFLAGS	=       $(ARFLAGS)

# code check and doxygen
LINT		=	flexelint
DOXY		=	doxygen
SPLINT		=       splint
#SPLINTFLAGS	=	-UNDEBUG -UWITH_READLINE -UROUNDING_FE -UWITH_GMP -UWITH_ZLIB -preproc -formatcode +skip-sys-headers -weak +relaxtypes
SPLINTFLAGS	=	-UNDEBUG -UWITH_READLINE -UROUNDING_FE -UWITH_GMP -UWITH_ZLIB -which-lib -warn-posix-headers +skip-sys-headers -preproc -formatcode -weak \
			-redef +export-header +export-local +decl-undef +relaxtypes

# third party testing parameters
FSCIP		=	fscip
CPLEX		=	cplex
CBC		=	cbc
CBCPARALLEL	=	cbc-parallel
MOSEK           =       mosek
GUROBI          =       gurobi_cl
XPRESS_BIN      =       xpress
GLPK            =       glpsol
SYMPHONY        =       symphony
BLIS            =       blis

# system parameters
SHELL		= 	bash
READ		=	read -e
LN_s		= 	ln -s
LN_sf		=	ln -sf

# initial compiler and linker flags
FLAGS		=	-I$(SRCDIR) -DWITH_SCIPDEF -DFNAME_$(FORTRAN_NAMING_CONVENTION) -I$(SCIPDIR)/src
OFLAGS		=
CFLAGS		=
CXXFLAGS	=

ifeq ($(COMP),msvc)
LDFLAGS		=
else
LDFLAGS		=	$(LINKCC_l)m$(LINKLIBSUFFIX)
endif

ARFLAGS		=	cr
DFLAGS		=	-MM

GCCWARN		=	-pedantic -Wno-long-long -Wall -W -Wpointer-arith -Wcast-align -Wwrite-strings -Wshadow \
			-Wno-unknown-pragmas -Wno-unused-parameter \
			-Wredundant-decls -Wdisabled-optimization \
			-Wsign-compare -Wstrict-prototypes \
			-Wmissing-declarations -Wmissing-prototypes -Wdeclaration-after-statement #-Wno-variadic-macros
# GCCWARN is not only used for GCC!
ifeq ($(COMP),gnu)
GCCWARN += -Wno-maybe-uninitialized
endif

GXXWARN		=	-pedantic -Wno-long-long -Wall -W -Wpointer-arith -Wcast-align -Wwrite-strings -Wshadow \
			-Wno-unknown-pragmas -Wno-unused-parameter \
			-Wredundant-decls -Wdisabled-optimization \
			-Wctor-dtor-privacy -Wnon-virtual-dtor -Wreorder \
			-Woverloaded-virtual -Wsign-promo -Wsynth \
			-Wcast-qual -Wno-unused-parameter -Wno-strict-overflow #-Wno-variadic-macros -Wold-style-cast -Wshadow -Wundef

ifeq ($(SHARED),true)
LIBTYPE		=	shared
  ifeq ($(LIBEXTFORCESTATIC),true)
	LIBEXTTYPE	=	static
	LIBEXTEXT	=	$(STATICLIBEXT)
  else
	LIBEXTTYPE	=	shared
	LIBEXTEXT	=	$(SHAREDLIBEXT)
  endif
else
LIBTYPE		=	static
LIBEXTTYPE	=	static
LIBEXTEXT	=	$(STATICLIBEXT)
endif

BASE		=	$(OSTYPE).$(ARCH).$(COMP).$(OPT)
OBJDIR		=	obj/$(LIBTYPE)/O.$(BASE)
BINOBJDIR	=	$(OBJDIR)/bin
LIBOBJDIR	=	$(OBJDIR)/lib
LIBOBJSUBDIRS	=	$(LIBOBJDIR)/scip \
			$(LIBOBJDIR)/objscip \
			$(LIBOBJDIR)/blockmemshell \
			$(LIBOBJDIR)/tclique \
			$(LIBOBJDIR)/lpi \
			$(LIBOBJDIR)/tpi \
			$(LIBOBJDIR)/nlpi \
			$(LIBOBJDIR)/xml \
			$(LIBOBJDIR)/dijkstra \
			$(LIBOBJDIR)/symmetry \
			$(LIBOBJDIR)/tinycthread
SRCDIR		=	src
BINDIR		=	bin
LIBDIR		=	lib
INCLUDEDIR	=	include
EXEEXTENSION	=
ALLSRC		=


#-----------------------------------------------------------------------------
# include additional make files
#-----------------------------------------------------------------------------
-include $(SCIPREALPATH)/make/make.$(BASE)
-include $(SCIPREALPATH)/make/local/make.$(HOSTNAME)
-include $(SCIPREALPATH)/make/local/make.$(HOSTNAME).$(COMP)
-include $(SCIPREALPATH)/make/local/make.$(HOSTNAME).$(COMP).$(OPT)
-include $(SCIPREALPATH)/make/local/make.local


#-----------------------------------------------------------------------------
# define path to find SCIP upon execution
#-----------------------------------------------------------------------------

ifeq ($(SHARED),true)
ifneq ($(LINKRPATH),)
ifneq ($(SCIPINTERNAL),true)
# If this makefile is used to build an external project, we use SCIPREALPATH.
LDFLAGS		+=	$(LINKRPATH)$(SCIPREALPATH)/$(LIBDIR)/shared
else
# If this makefile is used to build SCIP, we use the variable ORIGIN,
# which is replaced by the path of the binary at execution time.
LDFLAGS		+=	$(LINKRPATH)\$$ORIGIN/../$(LIBDIR)/shared
endif
endif
endif

#-----------------------------------------------------------------------------
# add user flags
#-----------------------------------------------------------------------------
FLAGS		+=	$(USRFLAGS)
OFLAGS		+=	$(USROFLAGS)
CFLAGS		+=	$(USRCFLAGS)
CXXFLAGS	+=	$(USRCXXFLAGS)
LDFLAGS		+=	$(USRLDFLAGS)
ARFLAGS		+=	$(USRARFLAGS)
DFLAGS		+=	$(USRDFLAGS)


#-----------------------------------------------------------------------------
# Memory Management
#-----------------------------------------------------------------------------

ifeq ($(NOBLKBUFMEM),true)
	FLAGS		+=	-DBMS_NOBLOCKMEM -DSCIP_NOBUFFERMEM
else
  ifeq ($(NOBLKMEM),true)
	FLAGS		+=	-DBMS_NOBLOCKMEM
  endif
  ifeq ($(NOBUFMEM),true)
	FLAGS		+=	-DSCIP_NOBUFFERMEM
  endif
endif

#-----------------------------------------------------------------------------
# PARASCIP
#-----------------------------------------------------------------------------

ifeq ($(PARASCIP),false)
FLAGS		+=	-DNPARASCIP
else
LDFLAGS 	+=	-lpthread
endif

#-----------------------------------------------------------------------------
# LP Solver Interface
#-----------------------------------------------------------------------------

# redefine old LP-solver "spx" by "spx2"
ifeq ($(LPS),spx)
override LPS	=	spx2
endif

LPILIBNAME	=	lpi$(LPS)

#-------------------------------------------------------
# define flags for CPLEX
ifeq ($(LPS),cpx)
LPSLDFLAGS	+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCC_l)cplex.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) \
			$(LINKCC_l)pthread$(LINKLIBSUFFIX) $(LINKCC_l)dl$(LINKLIBSUFFIX)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libcplex.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
endif

#-------------------------------------------------------
# define flags for Gurobi
ifeq ($(LPS),grb)
LPSLDFLAGS	+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/shared $(LINKCC_l)gurobi.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/shared/libgurobi.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
ifneq ($(LINKRPATH),)
ifneq ($(SCIPINTERNAL),)
LDFLAGS		+=	$(LINKRPATH)\$$ORIGIN/../$(LIBDIR)/shared
else
LDFLAGS		+=	$(LINKRPATH)$(SCIPREALPATH)/$(LIBDIR)/shared
endif
endif
endif

#-------------------------------------------------------
# define flags for XPRESS
ifeq ($(LPS),xprs)
LPSLDFLAGS	+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/shared $(LINKCC_l)xpress.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) \
			$(LINKCC_l)pthread$(LINKLIBSUFFIX) $(LINKCC_l)dl$(LINKLIBSUFFIX)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/shared/libxpress.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
endif

#-------------------------------------------------------
# define flags for Mosek
ifeq ($(LPS),msk)
LPSLDFLAGS	+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/shared $(LINKCC_l)mosek.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) \
			$(LINKCC_l)iomp5.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/shared/libmosek.$(OSTYPE).$(ARCH).$(COMP).$(SHAREDLIBEXT) \
			$(SCIPREALPATH)/$(LIBDIR)/shared/libiomp5.$(OSTYPE).$(ARCH).$(COMP).$(SHAREDLIBEXT)
ifneq ($(LINKRPATH),)
MOSEKDIR	= 	$(dir $(realpath $(SCIPREALPATH)/$(LIBDIR)/shared/libmosek.$(OSTYPE).$(ARCH).$(COMP).$(SHAREDLIBEXT)))
LPSLDFLAGS	+=      $(LINKRPATH)$(MOSEKDIR)
endif
# correct path for everything that comes after Mosek
ifneq ($(SHARED),true)
LPSLDFLAGS	+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/static
endif
endif

#-------------------------------------------------------
# define flags for SoPlex - old interface spx1
ifeq ($(LPS),spx1)
LPSLDFLAGS	+=	$(LINKCXX_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCXX_l)soplex.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)$(LINKLIBSUFFIX)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libsoplex.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)

# if using the LP-check, also add Cplex flags
ifeq ($(LPSCHECK),true)
LPSLDFLAGS	+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCC_l)cplex.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libcplex.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
endif
endif

#-------------------------------------------------------
# define flags for SoPlex - new interface spx2
ifeq ($(LPS),spx2)
LPSLDFLAGS	+=	$(LINKCXX_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCXX_l)soplex.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)$(LINKLIBSUFFIX)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libsoplex.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)

# if using the LP-check, also add Cplex flags
ifeq ($(LPSCHECK),true)
LPSLDFLAGS	+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCC_l)cplex.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libcplex.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
endif
endif

#-------------------------------------------------------
# define flags for Clp
ifeq ($(LPS),clp)
CLPDIR		= 	$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/clp.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)
# for newer Clp versions all linker flags are in share/coin/doc/Clp/clp_addlibs.txt
LPSLDFLAGS	+=	$(shell test -e $(CLPDIR)/share/coin/doc/Clp/clp_addlibs.txt && cat $(CLPDIR)/share/coin/doc/Clp/clp_addlibs.txt)
# if we could not find clp_addlibs file, try to guess linker flags
ifeq ($(LPSLDFLAGS),)
LPSLDFLAGS	+=	$(LINKCXX_L)$(CLPDIR)/lib $(LINKCXX_l)Clp$(LINKLIBSUFFIX) \
			$(LINKCXX_l)CoinUtils$(LINKLIBSUFFIX) \
			$(LINKCXX_l)bz2$(LINKLIBSUFFIX) $(LINKCXX_l)lapack$(LINKLIBSUFFIX)
endif
# ensure that also shared libraries are found while running the binary
ifneq ($(LINKRPATH),)
CLPFULLPATH	:=	$(realpath $(CLPDIR))
LPSLDFLAGS	+=	$(LINKRPATH)$(CLPFULLPATH)/lib
endif
LPSLIBFILES	+=      $(CLPDIR)/lib/libClp.$(LIBEXTEXT) $(CLPDIR)/lib/libCoinUtils.$(LIBEXTEXT)
endif

#-------------------------------------------------------
# define flags for QSOPT
ifeq ($(LPS),qso)
LPSLDFLAGS    	+=      $(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/static $(LINKCC_l)qsopt.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libqsopt.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
endif

#-------------------------------------------------------
# define empty flags for "none"
ifeq ($(LPS),none)
LPSLDFLAGS	+=
endif

LPILIB		=	$(LPILIBNAME).$(BASE)
LPILIBFILE	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(LPILIB).$(LIBEXT)
LPILIBSHORTLINK	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(LPILIBNAME).$(LIBEXT)


#-----------------------------------------------------------------------------
# Parallel Interface
#-----------------------------------------------------------------------------

TPILIBNAME	=	tpi$(TPI)

ifeq ($(TPI),omp)
ifeq ($(COMP),gnu)
TPICFLAGS  += $(LINKCC_f)openmp$(LINKLIBSUFFIX)
TPILDFLAGS  += $(LINKCC_f)openmp$(LINKLIBSUFFIX)
else ifeq ($(COMP),intel)
TPICFLAGS  += -openmp$(LINKLIBSUFFIX)
TPILDFLAGS  += -openmp$(LINKLIBSUFFIX)
else
TPICFLAGS  +=
TPILDFLAGS  +=
endif
endif

ifeq ($(TPI),none)
TPILDFLAGS	+=
endif

TPILIB		=	$(TPILIBNAME).$(BASE)
TPILIBFILE	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(TPILIB).$(LIBEXT)
TPILIBSHORTLINK	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(TPILIBNAME).$(LIBEXT)

#-----------------------------------------------------------------------------
# Symmetry Interface
#-----------------------------------------------------------------------------

ifeq ($(SYM),bliss)
LDFLAGS		+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCC_l)bliss.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX)
endif

#-----------------------------------------------------------------------------
# External Libraries
#-----------------------------------------------------------------------------

ifeq ($(ZLIB_LDFLAGS),)
ZLIB		=	false
endif

ifeq ($(ZLIB),true)
FLAGS		+=	-DWITH_ZLIB $(ZLIB_FLAGS)
LDFLAGS		+=	$(ZLIB_LDFLAGS)
endif

ifeq ($(ZIMPL),auto)
ZIMPL		=	$(GMP)
ifeq ($(ZIMPL),false)
ifeq ($(MAKELEVEL),0)
$(warning ZIMPL was deactived because of missing GMP support.)
endif
endif
endif

ifeq ($(GMP_LDFLAGS),)
GMP		=	false
endif

ifeq ($(ZIMPL),true)
ifeq ($(GMP),false)
$(error ZIMPL requires the GMP to be linked. Use either ZIMPL=false or GMP=true)
endif
ZIMPLLIB	=	$(LINKCC_l)zimpl.$(OSTYPE).$(ARCH).$(COMP).$(ZIMPLOPT)$(LINKLIBSUFFIX)
LDFLAGS		+=	$(ZIMPLLIB) $(ZIMPL_LDFLAGS)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libzimpl.$(OSTYPE).$(ARCH).$(COMP).$(ZIMPLOPT).$(LIBEXTEXT)
endif

ifeq ($(GMP),true)
FLAGS		+=	-DWITH_GMP $(GMP_FLAGS)
LDFLAGS		+=	$(GMP_LDFLAGS)
endif

ifeq ($(READLINE_LDFLAGS),)
READLINE	=	false
endif

ifeq ($(READLINE),true)
FLAGS		+=	-DWITH_READLINE $(READLINE_FLAGS)
LDFLAGS		+=	$(READLINE_LDFLAGS)
endif

#-------------------------------------------------------
# define flags for Ipopt
ifeq ($(IPOPT),true)
LINKER		=	CPP
# we require here Ipopt >= 3.10.0
# - all linker flags are in share/coin/doc/Ipopt/ipopt_addlibs_cpp.txt
# - shared libraries are installed into the lib directory, so add this to the rpath
FLAGS		+=	-I$(LIBDIR)/$(LIBTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/include/coin $(IPOPT_FLAGS)
IPOPTLIBS       =       $(shell cat $(SCIPDIR)/$(LIBDIR)/$(LIBEXTTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/share/coin/doc/Ipopt/ipopt_addlibs_cpp.txt)
LDFLAGS		+=	$(IPOPTLIBS)
ifneq ($(LINKRPATH),)
ifneq ($(SCIPINTERNAL),)
LDFLAGS		+=	$(LINKRPATH)\$$ORIGIN/../$(LIBDIR)/$(LIBEXTTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/lib
else
LDFLAGS		+=	$(LINKRPATH)\$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/lib
endif
endif
NLPILIBSHORTNAMEIPOPT = .ipopt
endif

# define flags for FilterSQP
ifeq ($(FILTERSQP),true)
FILTERSQPLIBS       =       $(LINKCC_l)filtersqp.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)bqpd.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX)
LDFLAGS		+=	$(FILTERSQPLIBS) $(FORTRANLIBS)
NLPILIBSHORTNAMEFILTERSQP = .filtersqp
endif

# define flags for WORHP
ifeq ($(WORHP),true)
FLAGS		+=	-I$(LIBDIR)/$(LIBTYPE)/worhp.$(OSTYPE).$(ARCH).$(COMP).$(WORHPOPT)/include
LDFLAGS  += $(LINKCC_l)worhp
LDFLAGS  += $(LINKCC_L)$(SCIPDIR)/$(LIBDIR)/$(LIBTYPE)/worhp.$(OSTYPE).$(ARCH).$(COMP).$(WORHPOPT)/lib
ifneq ($(LINKRPATH),)
ifneq ($(SCIPINTERNAL),)
LDFLAGS		+=	$(LINKRPATH)\$$ORIGIN/../$(LIBDIR)/$(LIBEXTTYPE)/worhp.$(OSTYPE).$(ARCH).$(COMP).$(WORHPOPT)/lib
else
LDFLAGS		+=	$(LINKRPATH)\$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/worhp.$(OSTYPE).$(ARCH).$(COMP).$(WORHPOPT)/lib
endif
endif
endif

ifeq ($(EXPRINT),cppad)
LINKER		=	CPP
NLPILIBSHORTNAMECPPAD = .cppad
endif

ifeq ($(GAMS),true)
LDFLAGS		+=	-ldl -lpthread
endif

#-----------------------------------------------------------------------------
# SHARED Libaries
#-----------------------------------------------------------------------------

# (re)define some variables
ifeq ($(SHARED),true)
ifneq ($(COMP),msvc)
FLAGS		+=	-fPIC
endif
LIBEXT		=	$(SHAREDLIBEXT)
ifeq ($(LINKER),CPP)
LIBBUILD	=	$(LINKCXX)
LIBBUILD_L	=	$(LINKCXX_L)
else
LIBBUILD	=	$(LINKCC)
LIBBUILD_L	=	$(LINKCC_L)
endif

ifeq ($(COMP),msvc)
LIBBUILDFLAGS	+=      -dll
LIBBUILD_o	= 	-out:
else
LIBBUILDFLAGS	+=      -shared
LIBBUILD_o	= 	-o # the trailing space is important
endif
ARFLAGS		=
RANLIB		=
endif



#-----------------------------------------------------------------------------
# SCIP Library
#-----------------------------------------------------------------------------

SCIPLIBNAME	=	scip
SCIPLIB		=	$(SCIPLIBNAME).$(BASE)
SCIPLIBFILE	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(SCIPLIB).$(LIBEXT)
SCIPLIBSHARTLINK=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(SCIPLIBNAME).$(LIBEXT)


#-----------------------------------------------------------------------------
# OBJSCIP Library
#-----------------------------------------------------------------------------

OBJSCIPLIBNAME	=	objscip
OBJSCIPLIB	=	$(OBJSCIPLIBNAME).$(BASE)
OBJSCIPLIBFILE	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(OBJSCIPLIB).$(LIBEXT)
OBJSCIPLIBSHORTLINK=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(OBJSCIPLIBNAME).$(LIBEXT)


#-----------------------------------------------------------------------------
# NLP interfaces and expression interpreter library
#-----------------------------------------------------------------------------

NLPILIBNAME	=	nlpi$(NLPILIBSHORTNAMECPPAD)$(NLPILIBSHORTNAMEIPOPT)$(NLPILIBSHORTNAMEFILTERSQP)
NLPILIB		=	$(NLPILIBNAME).$(BASE)
NLPILIBFILE	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(NLPILIB).$(LIBEXT)
NLPILIBSHORTLINK=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(NLPILIBNAME).$(LIBEXT)

#-----------------------------------------------------------------------------
# total linking part for all of SCIP
#-----------------------------------------------------------------------------

# link SCIP for C projects
LINKCXXSCIPALL	=	$(LINKCXX_L)$(SCIPDIR)/lib/$(LIBTYPE) $(LINKCXX_l)$(SCIPLIB)$(LINKLIBSUFFIX) \
			$(LINKCXX_l)$(OBJSCIPLIB)$(LINKLIBSUFFIX) $(LINKCXX_l)$(LPILIB)$(LINKLIBSUFFIX) $(LINKCXX_l)$(NLPILIB)$(LINKLIBSUFFIX) \
			$(LINKCC_l)$(TPILIB)$(LINKLIBSUFFIX) $(OFLAGS) $(LPSLDFLAGS) $(LDFLAGS)

# link SCIP for C++ projects (including libobjscip)
LINKCCSCIPALL	=	$(LINKCC_L)$(SCIPDIR)/lib/$(LIBTYPE) $(LINKCC_l)$(SCIPLIB)$(LINKLIBSUFFIX) \
			$(LINKCC_l)$(OBJSCIPLIB)$(LINKLIBSUFFIX) $(LINKCC_l)$(LPILIB)$(LINKLIBSUFFIX) $(LINKCC_l)$(NLPILIB)$(LINKLIBSUFFIX) \
			$(LINKCC_l)$(TPILIB)$(LINKLIBSUFFIX) $(OFLAGS) $(LPSLDFLAGS) $(LDFLAGS)
